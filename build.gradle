import groovy.json.JsonSlurper

buildscript {
	dependencies {
		classpath "com.google.gradle:osdetector-gradle-plugin:1.4.0"
	}
	repositories {
		mavenCentral()
	}
}

description = "Mongoose - high-load storage performance testing automation tool"

allprojects {
	version = defineVersion()
	apply plugin: "java"
}

ext {
	depVersion = [
		log4j: "2.6.2",
		netty: "4.1.4.Final",
		jackson: "2.8.1",
	]
	setClassPath = {
		configurations -> [
			configurations.compile.collect {
				file -> [
					"lib", file.name
				].join(File.separator)
			}.join(' '),
			(configurations.compileOnly - configurations.compile).collect {
				file -> file.name
			}.join(' ')
		].join(' ')
	}
	mutualProjects = [
		project("storage:mock"),
		project("monitor"),
		project("generator"),
		project("storage:driver-fs"),
		project("storage:driver-http-s3")
	]
}

subprojects {
	apply plugin: "com.google.osdetector"

	tasks.withType(JavaCompile) {
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
	}

	task "create-dirs" << {
		sourceSets*.java.srcDirs*.each { it.mkdirs() }
		sourceSets*.resources.srcDirs*.each { it.mkdirs() }
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		testCompile "junit:junit:4.12"
	}

	jar {
		def rootName = rootProject.name
		def name = project.name
		archiveName "$rootName-$name.$extension"
		manifest {
			attributes (
				"Implementation-Version": version,
				"Implementation-Title": "$rootName-$name"
			)
		}
	}
}

task dist(type: Tar) {
	group = "distribution"
	description = "Collect Mongoose as an archive"
	dependsOn tasks.withType(Jar)
	baseName = rootProject.name
	compression = Compression.GZIP
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	into("$baseName-$rootProject.version") {
		into("lib") {
			for (Project p: mutualProjects) {
				from p.configurations.runtime
			}
		}
		for (Project p: mutualProjects) {
			from p.jar.outputs.files
			from p.configurations.compileOnly - p.configurations.compile
		}
	}
}


task printVersion {
	group = "versioning"
	description = "Prints Mongoose version."
	doLast { logger.quiet "Mongoose version: $version" }
}

task wrapper(type: Wrapper) {
	gradleVersion = "2.14.1"
}

String defineVersion() {
	def configFilePath = [rootDir, "ui", "src", "main", "resources", "defaults.json"].join(File.separator);
	def inputFile = new File(configFilePath)
	def json = new JsonSlurper().parseText(inputFile.text)
	json.version
}
