import groovy.json.JsonSlurper

buildscript {
	dependencies {
		classpath "com.google.gradle:osdetector-gradle-plugin:1.4.0"
	}
	repositories {
		mavenCentral()
	}
}

description = "Mongoose is a high-load storage performance testing tool"
group = "com.github.emc-mongoose"

allprojects {
	apply plugin: "java"
	version = defineVersion()
}

ext {
	depVersion = [
		commonsCodec : "1.10",
		commonsCollections : "4.1",
		commonsLang : "2.6",
		disruptor : "3.3.4",
		jackson : "2.8.4",
		javassist : "3.21.0-GA",
		log4j : "2.7",
		metrics : "3.1.2",
		netty : "4.1.6.Final",
	]
	setClassPath = {
		configurations -> [
			configurations.runtime.collect {
				file -> [
					"lib", file.name
				].join(File.separator)
			}.join(" "),
			(configurations.compileOnly - configurations.runtime).collect {
				file -> file.name
			}.join(" ")
		].join(" ")
	}
	mutualProjects = subprojects.findAll {
		it != project("load") &&
		it != project("storage") &&
		it != project("storage:driver") &&
		it != project("storage:driver:net") &&
		it != project("storage:driver:net:http") &&
		it != project("storage:driver:nio")
	}
}

subprojects {
	apply plugin: "maven"
	apply plugin: "signing"
	apply plugin: "com.google.osdetector"

	tasks.withType(JavaCompile) {
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
	}

	task("create-dirs").doLast(
		{
			sourceSets*.java.srcDirs*.each { it.mkdirs() }
			sourceSets*.resources.srcDirs*.each { it.mkdirs() }
		}
	)

	repositories {
		mavenCentral()
	}

	dependencies {
		testCompile "junit:junit:4.12"
	}

	jar {
		LinkedList names = new LinkedList()
		collectName(project, names)
		def name = names.join("-")
		archiveName "$name.$extension"
		manifest {
			attributes (
				"Implementation-Version": version,
				"Implementation-Title": "$name"
			)
		}
	}

	test {
		maxHeapSize "2g"
		testLogging {
			events "passed", "skipped", "failed", "standardOut"
			showExceptions = true
			showStandardStreams = true
		}
	}

	artifacts {
		archives jar
	}

	/*signing {
		sign configurations.archives
	}

	// see http://central.sonatype.org/pages/gradle.html for details
	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				pom.project {
					name "mongoose"
					packaging "jar"
					artifactId "$name"
					url "https://github.com/emc-mongoose/mongoose/wiki"

					scm {
						connection "https://github.com/emc-mongoose/mongoose.git"
						developerConnection "https://github.com/emc-mongoose/mongoose.git"
						url "https://github.com/emc-mongoose/mongoose.git"
					}

					licenses {
						license {
							name "The MIT License (MIT)"
							url "https://github.com/emc-mongoose/mongoose/wiki/License"
						}
					}

					developers {
						developer {
							id "akurilov"
							name "Andrey Kurilov"
							email "akurilov123@gmail.com"
						}
					}
				}
			}
		}
	}*/
}

task dist(type: Tar) {
	group = "distribution"
	description = "Collect Mongoose as an archive"
	dependsOn tasks.withType(Jar)
	baseName = rootProject.name
	compression = Compression.GZIP
	destinationDir = new File("build", "dist")
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	into("$baseName-$rootProject.version") {
		into("config") {
			from { "config" }
		}
		into("lib") {
			for(Project p: mutualProjects) {
				from p.configurations.runtime
			}
		}
		for(Project p: mutualProjects) {
			from p.jar.outputs.files
		}
		into("scenario") {
			from { "scenario" }
		}
	}
}


task printVersion {
	group = "versioning"
	description = "Prints Mongoose version."
	doLast { logger.quiet "Mongoose version: $version" }
}

task wrapper(type: Wrapper) {
	gradleVersion = "3.3"
}

void collectName(Project p, LinkedList<String> names) {
	names.addFirst p.name
	if(p.parent != null) {
		collectName(p.parent, names)
	}
}

String defineVersion() {
	def configFilePath = [rootDir, "config", "defaults.json"].join(File.separator);
	def inputFile = new File(configFilePath)
	def json = new JsonSlurper().parseText(inputFile.text)
	json.version
}
