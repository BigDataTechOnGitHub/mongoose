import groovy.json.JsonSlurper
import groovy.json.JsonParserType

import java.nio.file.Paths
import java.util.regex.Pattern
description = "Mongoose is a high-load storage performance testing tool"

buildscript {
	dependencies {
		classpath "com.google.gradle:osdetector-gradle-plugin:1.4.0"
	}
	repositories {
		mavenCentral()
	}
}

allprojects {

	repositories {
		mavenCentral()
	}

	apply plugin: "java"
	apply plugin: "maven"
	apply plugin: "signing"

	group = "com.github.emc-mongoose"
	version = defineVersion()

	signing {
		required {
			gradle.taskGraph.hasTask("uploadArchives")
		}
		sign configurations.archives
	}

	// travis deploy stage runs "./gradlew check" again which is unnecessary
	check.dependsOn -= test
}

String defineVersion() {
	def configFilePath = [rootDir, "config", "defaults.json"].join(File.separator);
	def inputFile = new File(configFilePath)
	def json = new JsonSlurper().setType(JsonParserType.LAX).parseText(inputFile.text)
	json.version
}

task printVersion {
	group = "versioning"
	description = "Prints Mongoose version."
	doLast { logger.quiet "Mongoose version: $version" }
}

ext {

	jarFileName = null

	depVersion = [
		commonsCodec : "1.11",
		commonsLang : "2.6",
		disruptor : "3.4.2",
		jackson : "2.9.5",
		javaCommons : "[2.0.3,)",
		javaConcurrent : "[2.0.5,)",
		javassist : "3.22.0-GA",
		junit : "4.12",
		slf4j : "1.7.25",
		log4j : "2.8.2",
		metrics : "4.0.2",
		nagaina : "[3.6.10,)",
		netty : "4.1.24.Final",
		nettyConnectionPool : "[1.0.1,)",
	]

	leafProjects = subprojects.findAll {
		it != project("api") && it != project("storage") && it != project("storage:driver")
	}
}

def classPathString(final configuration, final isExt) {
	return configuration
		.collect {
			file ->
				if(isExt) {
					// it's 3rd party if jar file name doesn't contain the root project name
					if(-1 == file.name.indexOf(rootProject.name)) {
						["..", "lib", file.name].join(File.separator)
					} else {
						["..", file.name].join(File.separator)
					}
				} else {
					// it's 3rd party if jar file name doesn't contain the root project name
					if(-1 == file.name.indexOf(rootProject.name)) {
						["lib", file.name].join(File.separator)
					} else {
						file.name
					}
				}
		}
		.join(" ")
}

void collectName(Project p, LinkedList<String> names) {
	names.addFirst p.name
	if(p.parent != null) {
		collectName(p.parent, names)
	}
}

subprojects {

	afterEvaluate {

		compileJava {
			sourceCompatibility = JavaVersion.VERSION_1_8
			targetCompatibility = JavaVersion.VERSION_1_8
		}

		compileTestJava {
			sourceCompatibility = JavaVersion.VERSION_1_8
			targetCompatibility = JavaVersion.VERSION_1_8
		}

		jar {
			if(project in leafProjects) {
				archiveName "${project.jarFileName}.${extension}"
				manifest {
					attributes(
						"Class-Path": classPathString(configurations.runtime, project.isExt),
						"Implementation-Version": version,
						"Implementation-Title": "$name",
					)
				}
				if(null != project.mainClass) {
					manifest {
						attributes(
							"Main-Class": project.mainClass,
						)
					}
				}
			}
		}

		test {
			if(project in leafProjects) {
				doFirst {
					jvmArgs = [
						//"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005",
						"-XX:+HeapDumpOnOutOfMemoryError",
					]
				}
				maxHeapSize "1g"
				/*
				systemProperty "com.sun.management.jmxremote", "true"
				systemProperty "com.sun.management.jmxremote.port", "9010"
				systemProperty "com.sun.management.jmxremote.rmi.port", "9010"
				systemProperty "com.sun.management.jmxremote.local.only", "false"
				systemProperty "com.sun.management.jmxremote.authenticate", "false"
				systemProperty "com.sun.management.jmxremote.ssl", "false"
				*/
				testLogging {
					events "passed", "skipped", "failed", "standardOut"
					showExceptions = true
					showStandardStreams = true
				}
			}
		}
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		if(project in leafProjects) {
			classifier = "sources"
			archiveName = "${project.jarFileName}-$classifier.$extension"
			from sourceSets.main.allSource
		}
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		if(project in leafProjects) {
			classifier = "javadoc"
			archiveName = "${project.jarFileName}-$classifier.$extension"
			from javadoc.destinationDir
		}
	}

	artifacts {
		archives jar
		archives sourcesJar
		archives javadocJar
	}

	// see http://central.sonatype.org/pages/gradle.html for details
	uploadArchives {

		// prevent the execution for empty (not leaf) subprojects and tests packages
		if(project.path.contains("tests") || !(project in leafProjects)) {
			return
		}

		LinkedList nameParts = new LinkedList()
		collectName(project, nameParts)

		def ossrhUsername = project.hasProperty("ossrhUsername") ?
			project.property("ossrhUsername") : null
		def ossrhPassword = project.hasProperty("ossrhPassword") ?
			project.property("ossrhPassword") : null

		repositories {
			mavenDeployer {
				beforeDeployment {
					MavenDeployment deployment -> signing.signPom(deployment)
				}

				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				pom {

					groupId = rootProject.group
					name = nameParts.join("-")
					artifactId = name

					project {
						description = rootProject.description

						url "https://github.com/emc-mongoose/mongoose/wiki"

						scm {
							connection "https://github.com/emc-mongoose/mongoose.git"
							developerConnection "https://github.com/emc-mongoose/mongoose.git"
							url "https://github.com/emc-mongoose/mongoose.git"
						}

						licenses {
							license {
								name "The MIT License (MIT)"
								url "https://github.com/emc-mongoose/mongoose/wiki/License"
							}
						}

						developers {
							developer {
								id "akurilov"
								name "Andrey Kurilov"
								email "akurilov123@gmail.com"
							}
						}
					}
				}
			}
		}
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = "4.7"
}

static def isExtProject(final Project p) {
    final f = Paths.get(p.projectDir.toString(), "src", "main", "resources", "META-INF", "services").toFile()
    return f.exists() && f.isDirectory() && f.listFiles().length > 0
}

static def isTestsProject(final Project p) {
	if(p == null) {
		return false
	} else if(p.name.contains("test")) {
		return true
	} else {
		return isTestsProject(p.parent)
	}
}

task dist(type: Tar, dependsOn: tasks.withType(Jar)) {
	group = "distribution"
	description = "Collect Mongoose as an archive"
	baseName = "$rootProject.name-base"
	compression = Compression.GZIP
	destinationDir = new File("build", "dist")
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	into("$rootProject.name-$rootProject.version") {
		into("config") {
			from { "config" }
		}
		into("example") {
			from { "example" }
		}
		final extProjects = leafProjects.findAll { isExtProject(it) }
		final nonExtNonTestProjects = leafProjects.findAll {
			!isExtProject(it) && !isTestsProject(it)
		}
		into("ext") {
			for(final Project p: extProjects) {
				from p.jar.outputs.files
			}
		}
		into("lib") {
			for(final Project p: leafProjects) {
				from p.configurations.runtime {
					exclude "${rootProject.name}*.jar"
				}
			}
		}
		for(final Project p: nonExtNonTestProjects) {
			from p.jar.outputs.files
		}
	}
}
