import groovy.json.JsonSlurper

buildscript {
	dependencies {
		classpath "com.google.gradle:osdetector-gradle-plugin:1.4.0"
	}
	repositories {
		mavenCentral()
	}
}
ext {
	depVersion = [
		log4j: "2.6.2",
		netty: "4.1.4.Final",
		jackson: "2.8.1"
	]
}

description = "Mongoose - high-load storage performance testing automation tool"

allprojects {
	version = defineVersion()
}

subprojects {
	apply plugin: "java"
	apply plugin: "com.google.osdetector"

	version = super.version

	tasks.withType(JavaCompile) {
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
	}

	task "create-dirs" << {
		sourceSets*.java.srcDirs*.each { it.mkdirs() }
		sourceSets*.resources.srcDirs*.each { it.mkdirs() }
	}

	repositories {
		mavenCentral()
	}

	dependencies {

		compile(

			"org.apache.logging.log4j:log4j-core:${depVersion.log4j}",
			"org.apache.logging.log4j:log4j-api:${depVersion.log4j}",
			"org.apache.logging.log4j:log4j-iostreams:${depVersion.log4j}",
			"org.apache.logging.log4j:log4j-jul:${depVersion.log4j}",

			"commons-lang:commons-lang:2.6",
			"org.apache.commons:commons-collections4:4.1",
			"commons-codec:commons-codec:1.10",
			"io.dropwizard.metrics:metrics-core:3.1.2",

			"com.lmax:disruptor:3.3.4",

			"com.fasterxml.jackson.core:jackson-core:${depVersion.jackson}",
			"com.fasterxml.jackson.core:jackson-databind:${depVersion.jackson}",
			"com.fasterxml.jackson.core:jackson-annotations:${depVersion.jackson}",

			"it.unimi.dsi:fastutil:7.0.12"
		)

		testCompile "junit:junit:4.12"
	}
}

task printVersion {
	group = 'versioning'
	description = 'Prints Mongoose version.'
	doLast { logger.quiet "Mongoose version: $version" }
}

task wrapper(type: Wrapper) {
	gradleVersion = "2.14"
}

final class ProjectVersion {
	private final Integer major
	private final Integer feature
	private final Integer bugfix
	private final Boolean release

	public final static String SNAPSHOT = 'SNAPSHOT'

	ProjectVersion(
		final Integer major,
		final Integer feature, final Integer bugfix, final Boolean release) {
		this.major = major
		this.feature = feature
		this.bugfix = bugfix
		this.release = release
	}

	@Override
	String toString() {
		"$major.$feature.$bugfix${release ? '' : "-$SNAPSHOT"}"
	}
}


String defineVersion(final Integer major,
                final Integer feature, final Integer bugfix, final Boolean release) {
	new ProjectVersion(major, feature, bugfix, release).toString()
}

String defineVersion() {
	def configFilePath = [rootDir, "ui", "src", "main", "resources", "defaults.json"].join(File.separator);
	def inputFile = new File(configFilePath)
	def json = new JsonSlurper().parseText(inputFile.text)
	json.version
}
