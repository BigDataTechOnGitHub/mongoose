description = "mongoose-storage-driver-service"

dependencies {

	compile(
		"com.github.akurilov:java-commons:${depVersion.javaCommons}",
		project(":api:model"),
		project(":ui"),
		project(":storage:driver:builder"),
		"org.apache.logging.log4j:log4j-api:${depVersion.log4j}",
		"org.apache.logging.log4j:log4j-core:${depVersion.log4j}",
	)

	runtime(
		project(":storage:driver"),
		project(":storage:driver:net"),
		project(":storage:driver:net:http"),
		project(":storage:driver:nio"),
		"com.lmax:disruptor:${depVersion.disruptor}",
		"org.apache.logging.log4j:log4j-jul:${depVersion.log4j}",
		"org.slf4j:slf4j-api:${depVersion.slf4j}",
		"org.apache.logging.log4j:log4j-slf4j-impl:${depVersion.log4j}",
	)
}

jar {
	manifest {
		attributes (
			"Class-Path": classPathString(configurations.runtime),
			"Main-Class": "com.emc.mongoose.storage.driver.service.Main",
		)
	}
}

task dist(type: Tar, dependsOn: jar) {
	group = "distribution"
	description = "Build storage driver distribution tarball"
	baseName = "$rootProject.name-storage-driver-service"
	compression = Compression.GZIP
	destinationDir = new File("build", "dist")
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	into("$rootProject.name-$rootProject.version") {
		into("config") {
			from {
				"..${File.separator}..${File.separator}..${File.separator}config"
			}
		}
	}
	into("$rootProject.name-$rootProject.version") {
		into("ext") {
			final Collection<Project> extProjects = mutualProjects
				.findAll { isExtProject(it) }
				.findAll { it.displayName.contains("storage") && it.displayName.contains("driver") }
			for(final p: extProjects) {
				from p.jar.outputs.files
			}
		}
		into("lib") {
			from configurations.runtime {
				exclude "${rootProject.name}*.jar"
			}
		}
	}
	into("$rootProject.name-$rootProject.version") {
		from configurations.runtime {
			include "${rootProject.name}*.jar"
		}
	}
	into("$rootProject.name-$rootProject.version") {
		from jar.outputs.files
	}
}
