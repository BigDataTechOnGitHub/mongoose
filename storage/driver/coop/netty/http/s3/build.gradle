description = "mongoose-storage-driver-coop-netty-http-s3"

dependencies {

	compileOnly(
		project(":"),
		project(":storage:driver:coop"),
		project(":storage:driver:coop:netty"),
		project(":storage:driver:coop:netty:http"),
		"com.github.akurilov:confuse:${depVersion.confuse}",
		"com.github.akurilov:confuse-io-json:${depVersion.confuseIoJson}",
		"io.netty:netty-buffer:${depVersion.netty}",
		"io.netty:netty-codec-http:${depVersion.netty}",
		"org.apache.logging.log4j:log4j-api:${depVersion.log4j}",
		"org.apache.logging.log4j:log4j-core:${depVersion.log4j}",
	)

	testCompile(
		files(project(":").sourceSets.test.output.classesDir),
		"junit:junit:${depVersion.junit}",
		"com.github.docker-java:docker-java:[3,)",
	)

	testRuntime(
		"commons-codec:commons-codec:${depVersion.commonsCodec}",
		"com.github.akurilov:confuse-io-json:${depVersion.confuseIoJson}",
		"com.github.akurilov:fiber4j:${depVersion.fiber4j}",
		"com.github.akurilov:netty-connection-pool:${depVersion.nettyConnectionPool}",
		"io.netty:netty-handler:${depVersion.netty}",
		"com.lmax:disruptor:${depVersion.disruptor}",
		"io.netty:netty-transport-native-epoll:${depVersion.netty}:linux-x86_64",
	)
}

task s3StorageDriverTest(type: Test) {
	include "com/emc/mongoose/storage/driver/coop/netty/http/s3/*"
	testLogging {
		events "passed", "skipped", "failed", "standardOut"
		showExceptions = true
		showStandardStreams = true
	}
}

jar {

	baseName = project.description
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	manifest {
		attributes(
			"Implementation-Version": version,
			"Implementation-Title": project.description,
		)
	}
}
