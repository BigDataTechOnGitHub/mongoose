package com.emc.mongoose.load.step.linear;

import com.emc.mongoose.logging.LogUtil;

import com.github.akurilov.confuse.Config;
import com.github.akurilov.confuse.exceptions.InvalidValuePathException;
import com.github.akurilov.confuse.exceptions.InvalidValueTypeException;
import com.github.akurilov.confuse.impl.BasicConfig;

import org.apache.logging.log4j.Level;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CancellationException;

import static com.github.akurilov.commons.collection.TreeUtil.reduceForest;
import static com.github.akurilov.confuse.Config.deepToMap;

public interface LinearLoadStep {

	static Config initConfig(final Config baseConfig, final List<Map<String, Object>> stepConfigs) {

		final String autoStepId = "linear_" + LogUtil.getDateTimeStamp();
		final Config _config = new BasicConfig(baseConfig);
		final Config config;
		if(stepConfigs == null || stepConfigs.size() == 0) {
			if(_config.boolVal("load-step-idAutoGenerated")) {
				_config.val("load-step-id", autoStepId);
			}
			config = _config;
		} else {
			final List<Map<String, Object>> configForest = new ArrayList<>(stepConfigs.size() + 1);
			configForest.add(deepToMap(_config));
			configForest.addAll(stepConfigs);
			try {
				config = new BasicConfig(
					_config.pathSep(), _config.schema(), reduceForest(configForest)
				);
			} catch(final InvalidValueTypeException | InvalidValuePathException e) {
				LogUtil.exception(Level.FATAL, e, "Scenario syntax error");
				throw new CancellationException();
			}
		}

		return config;
	}
}
