package com.emc.mongoose.load.step.linear;

import com.emc.mongoose.env.Extension;
import com.emc.mongoose.item.io.IoType;
import com.emc.mongoose.load.step.LoadStepBase;
import com.emc.mongoose.load.step.client.LoadStepClientBase;
import com.emc.mongoose.logging.LogUtil;

import com.github.akurilov.commons.system.SizeInBytes;
import com.github.akurilov.confuse.Config;
import com.github.akurilov.confuse.exceptions.InvalidValuePathException;
import com.github.akurilov.confuse.exceptions.InvalidValueTypeException;
import com.github.akurilov.confuse.impl.BasicConfig;

import org.apache.logging.log4j.Level;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CancellationException;

import static com.github.akurilov.commons.collection.TreeUtil.reduceForest;
import static com.github.akurilov.confuse.Config.deepToMap;

public class LinearLoadStepClient
extends LoadStepClientBase {

	public LinearLoadStepClient(
		final Config baseConfig, final List<Extension> extensions, final List<Map<String, Object>> stepConfigs
	) {
		super(baseConfig, extensions, stepConfigs);
	}

	@Override
	protected LoadStepBase copyInstance(final List<Map<String, Object>> stepConfigs) {
		return new LinearLoadStepClient(baseConfig, extensions, stepConfigs);
	}

	@Override
	protected void init()
	throws IllegalStateException {

		final String autoStepId = "linear_" + LogUtil.getDateTimeStamp();
		final Config _config = new BasicConfig(baseConfig);
		final Config config;
		if(stepConfigs == null || stepConfigs.size() == 0) {
			if(_config.boolVal("load-step-idAutoGenerated")) {
				_config.val("load-step-id", autoStepId);
			}
			config = _config;
		} else {
			final List<Map<String, Object>> configForest = new ArrayList<>(stepConfigs.size() + 1);
			configForest.add(deepToMap(_config));
			configForest.addAll(stepConfigs);
			try {
				config = new BasicConfig(
					_config.pathSep(), _config.schema(), reduceForest(configForest)
				);
			} catch(final InvalidValueTypeException | InvalidValuePathException e) {
				LogUtil.exception(Level.FATAL, e, "Scenario syntax error");
				throw new CancellationException();
			}
		}
		actualConfig(config);

		final Config loadConfig = config.configVal("load");
		final Config stepConfig = loadConfig.configVal("step");
		final IoType ioType = IoType.valueOf(loadConfig.stringVal("type").toUpperCase());
		final int concurrency = stepConfig.intVal("limit-concurrency");
		final Config outputConfig = config.configVal("output");
		final Config metricsConfig = outputConfig.configVal("metrics");
		final SizeInBytes itemDataSize = new SizeInBytes(config.stringVal("item-data-size"));

		initMetrics(
			0, ioType, concurrency, stepConfig.listVal("node-addrs").size(),
			metricsConfig, itemDataSize, outputConfig.boolVal("color")
		);
	}

	@Override
	public String getTypeName() {
		return LinearLoadStepExtension.TYPE;
	}
}
