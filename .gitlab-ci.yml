image: docker:stable

variables:
  MONGOOSE_IMAGE_NAME: emcmongoose/mongoose
  ROBOTEST_IMAGE_NAME: emcmongoose/mongoose-robotest
  ROBOTEST_CONTAINER_WORKING_DIR: /root/mongoose

services:
  - docker:dind

stages:
  - build
  - deploy_docker_images
  - test_functional # functional containerized tests
  - test # simple unit/integration tests
  - deploy

build:
  image: openjdk:8-jdk-alpine
  stage: build
  script:
    - ./gradlew clean dist
  artifacts:
    paths:
      - build/libs/mongoose-*.jar

.test_java:
  image: openjdk:8-jdk-alpine
  stage: test

test_unit:
  extends: .test_java
  script:
  - ./gradlew test

test_integration:
  extends: .test_java
  script:
  - ./gradlew integrationTest

.deploy_docker_image:
  stage: deploy_docker_images
  script:
  - docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
  - docker build -f docker/${DOCKERFILE} -t ${IMAGE_NAME}:${CI_COMMIT_SHA} .
  - docker push ${IMAGE_NAME}:${CI_COMMIT_SHA}

deploy_mongoose_image:
  extends: .deploy_docker_image
  variables:
    DOCKERFILE: Dockerfile
    IMAGE_NAME: ${MONGOOSE_IMAGE_NAME}

deploy_robotest_image:
  extends: .deploy_docker_image
  variables:
    DOCKERFILE: Dockerfile.robotest
    IMAGE_NAME: ${ROBOTEST_IMAGE_NAME}

.test_robot:
  image: ${ROBOTEST_IMAGE_NAME}:${CI_COMMIT_SHA}
  stage: test_functional
  variables:
    HOST_WORKING_DRI: ${CI_PROJECT_DIR}
    MONGOOSE_VERSION: ${CI_COMMIT_SHA}
  script:
    - robot --outputdir ${ROBOTEST_CONTAINER_WORKING_DIR}/build/robotest --suite ${SUITE} --include ${TEST} ${ROBOTEST_CONTAINER_WORKING_DIR}/src/test/robot
    - rebot ${ROBOTEST_CONTAINER_WORKING_DIR}/build/robotest/output.xml

test_api_remote_config:
  extends: .test_robot
  variables:
    SUITE: api.remote
    TEST: config

test_api_remote_run:
  extends: .test_robot
  variables:
    SUITE: api.remote
    TEST: run

test_api_storage_s3:
  extends: .test_robot
  variables:
    SUITE: api.storage
    TEST: s3

test_legacy_circular_append:
  stage: test_functional
  variables:
    STORAGE_TYPE: atmos,s3,fs
    RUN_MODE: local,distributed
    CONCURRENCY: low,medium
    ITEM_SIZE: small
    TEST: CircularAppendTest
  script:
    - ./gradlew systemTest --tests com.emc.mongoose.system.${TEST}

test_legacy_read_verification_after_circular_update:
  stage: test_functional
  variables:
    STORAGE_TYPE: fs,s3
    RUN_MODE: local
    CONCURRENCY: low,medium
    ITEM_SIZE: small
    TEST: ReadVerificationAfterCircularUpdateTest
  script:
    - ./gradlew systemTest --tests com.emc.mongoose.system.${TEST}
  retry: 2

#CI_COMMIT_REF_NAME: branch/tag name
#CI_COMMIT_SHA: commit revision #
#CI_COMMIT_TAG: tag
